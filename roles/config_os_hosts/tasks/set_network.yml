---
# tasks file for cluster-pg

- name: CLUSTER-PG | enable systemd-networkd.service systemd-resolved.service systemd-timesyncd.service
  systemd: 
    name: "{{ item }}"
    enabled: yes
  with_items:
    - systemd-networkd.service 
    - systemd-resolved.service 
    - systemd-timesyncd.service

- name: CLUSTER-PG | start systemd-networkd.service systemd-resolved.service systemd-timesyncd.service
  systemd: 
    name: "{{ item }}"
    state: started
  with_items:
    - systemd-networkd.service
    - systemd-resolved.service
    - systemd-timesyncd.service

- name: CLUSTER-PG |  generate eth.network
  template:
    src: "eth.network.j2"
    dest: "{{ dir_networkd }}/eth.network"

- name: CLUSTER-PG | copy resolved.conf  
  copy:
    src: "resolved.conf"
    dest: "{{ dir_resolved }}" 
    
- name: CLUSTER-PG | test resolved.conf
  stat:
    path: /etc/resovl.conf
  register: status_resovl_conf
  
- name: CLUSTER-PG | rm resolved.conf if there is
  file:
    path: /etc/resolv.conf
    state: absent
  when: status_resovl_conf
    
- name: CLUSTER-PG | create symbolic link to /run/systemd/resolve/resolv.conf
  file:
    src: /run/systemd/resolve/resolv.conf
    dest: /etc/resolv.conf
    state: link
  
- name: CLUSTER-PG | copy timesyncd.conf  
  copy:
    src: "timesyncd.conf"
    dest: "{{ dir_timesyncd }}"

 
- name: CLUSTER-PG | stop NetworkManager.service networking.service 
  systemd:
    name: "{{ item }}"
    state: stopped
  ignore_errors: true
  with_items:
    - NetworkManager.service 
    - networking.service
    - ntpd.service
    
- name: CLUSTER-PG | mask NetworkManager.service networking.service 
  systemd:
    name: "{{ item }}"
    masked: yes
  ignore_errors: true   
  with_items:
    - NetworkManager.service 
    - networking.service
    - ntpd.service
   
- name: CLUSTER-PG | test exists /usr/sbin/ntpd
  stat:
    path: /usr/sbin/ntpd
  register: stat_ntpd

- name: CLUSTER-PG | rename /usr/sbin/ntpd -> /usr/sbin/ntpd_norun
  command: mv /usr/sbin/ntpd /usr/sbin/ntpd_norun
  when: stat_ntpd.stat.exists

  notify:
    - restart resolved service
    - restart timesyncd service
    - restart networkd service
      
#- name: CLUSTER-PG | reboot all 
#  shell: sleep 5 && sudo reboot now
#  async: 1
#  poll: 0
  
#- name: CLUSTER-PG | wait till all machines will reboot
#  wait_for:
#    host: "{{ inventory_hostname }}"
#    state: started
#    delay: 5
#    timeout: 40
#  delegate_to: 127.0.0.1
